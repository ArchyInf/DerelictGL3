/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.ext;

private {
    import derelict.opengl3.types;
    import derelict.opengl3.constants;
    import derelict.opengl3.internal;
}

enum : uint {
    // GL_EXT_texture_filter_anisotropic
    GL_TEXTURE_MAX_ANISOTROPY_EXT       = 0x84FE,
    GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT   = 0x84FF,
    
    // GL_EXT_framebuffer_object
    GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506,
    GL_MAX_RENDERBUFFER_SIZE_EXT        = 0x84E8,
    GL_FRAMEBUFFER_BINDING_EXT          = 0x8CA6,
    GL_RENDERBUFFER_BINDING_EXT         = 0x8CA7,
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0,
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4,
    GL_FRAMEBUFFER_COMPLETE_EXT         = 0x8CD5,
    GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6,
    GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7,
    GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9,
    GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA,
    GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB,
    GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC,
    GL_FRAMEBUFFER_UNSUPPORTED_EXT      = 0x8CDD,
    GL_MAX_COLOR_ATTACHMENTS_EXT        = 0x8CDF,
    GL_COLOR_ATTACHMENT0_EXT            = 0x8CE0,
    GL_COLOR_ATTACHMENT1_EXT            = 0x8CE1,
    GL_COLOR_ATTACHMENT2_EXT            = 0x8CE2,
    GL_COLOR_ATTACHMENT3_EXT            = 0x8CE3,
    GL_COLOR_ATTACHMENT4_EXT            = 0x8CE4,
    GL_COLOR_ATTACHMENT5_EXT            = 0x8CE5,
    GL_COLOR_ATTACHMENT6_EXT            = 0x8CE6,
    GL_COLOR_ATTACHMENT7_EXT            = 0x8CE7,
    GL_COLOR_ATTACHMENT8_EXT            = 0x8CE8,
    GL_COLOR_ATTACHMENT9_EXT            = 0x8CE9,
    GL_COLOR_ATTACHMENT10_EXT           = 0x8CEA,
    GL_COLOR_ATTACHMENT11_EXT           = 0x8CEB,
    GL_COLOR_ATTACHMENT12_EXT           = 0x8CEC,
    GL_COLOR_ATTACHMENT13_EXT           = 0x8CED,
    GL_COLOR_ATTACHMENT14_EXT           = 0x8CEE,
    GL_COLOR_ATTACHMENT15_EXT           = 0x8CEF,
    GL_DEPTH_ATTACHMENT_EXT             = 0x8D00,
    GL_STENCIL_ATTACHMENT_EXT           = 0x8D20,
    GL_FRAMEBUFFER_EXT                  = 0x8D40,
    GL_RENDERBUFFER_EXT                 = 0x8D41,
    GL_RENDERBUFFER_WIDTH_EXT           = 0x8D42,
    GL_RENDERBUFFER_HEIGHT_EXT          = 0x8D43,
    GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44,
    GL_STENCIL_INDEX1_EXT               = 0x8D46,
    GL_STENCIL_INDEX4_EXT               = 0x8D47,
    GL_STENCIL_INDEX8_EXT               = 0x8D48,
    GL_STENCIL_INDEX16_EXT              = 0x8D49,
    GL_RENDERBUFFER_RED_SIZE_EXT        = 0x8D50,
    GL_RENDERBUFFER_GREEN_SIZE_EXT      = 0x8D51,
    GL_RENDERBUFFER_BLUE_SIZE_EXT       = 0x8D52,
    GL_RENDERBUFFER_ALPHA_SIZE_EXT      = 0x8D53,
    GL_RENDERBUFFER_DEPTH_SIZE_EXT      = 0x8D54,
    GL_RENDERBUFFER_STENCIL_SIZE_EXT    = 0x8D55,
}

// GL_EXT_texture_filter_anisotropic
private __gshared bool _EXT_texture_filter_anisotropic;
bool EXT_texture_filter_anisotropic() @property { return _EXT_texture_filter_anisotropic; }

// GL_EXT_framebuffer_object
extern(  System  ) nothrow {
    alias da_glIsRenderbufferEXT = GLboolean function( GLuint );
    alias da_glBindRenderbufferEXT = void function( GLenum, GLuint );
    alias da_glDeleteRenderbuffersEXT = void function( GLsizei, in GLuint* );
    alias da_glGenRenderbuffersEXT = void function( GLsizei, GLuint* );
    alias da_glRenderbufferStorageEXT = void function( GLenum, GLenum, GLsizei, GLsizei );
    alias da_glGetRenderbufferParameterivEXT = void function( GLenum, GLenum, GLint* );
    alias da_glIsFramebufferEXT = GLboolean function( GLuint );
    alias da_glBindFramebufferEXT = void function( GLenum, GLuint );
    alias da_glDeleteFramebuffersEXT = void function( GLsizei, in GLuint* );
    alias da_glGenFramebuffersEXT = void function( GLsizei, GLuint* );
    alias da_glCheckFramebufferStatusEXT = GLenum function( GLenum );
    alias da_glFramebufferTexture1DEXT = void function( GLenum, GLenum, GLenum, GLuint, GLint );
    alias da_glFramebufferTexture2DEXT = void function( GLenum, GLenum, GLenum, GLuint, GLint );
    alias da_glFramebufferTexture3DEXT = void function( GLenum, GLenum, GLenum, GLuint, GLint, GLint );
    alias da_glFramebufferRenderbufferEXT = void function( GLenum, GLenum, GLenum, GLuint );
    alias da_glGetFramebufferAttachmentParameterivEXT = void function( GLenum, GLenum, GLenum, GLint* );
    alias da_glGenerateMipmapEXT = void function( GLenum );
}

__gshared {
    da_glIsRenderbufferEXT glIsRenderbufferEXT;
    da_glBindRenderbufferEXT glBindRenderbufferEXT;
    da_glDeleteRenderbuffersEXT glDeleteRenderbuffersEXT;
    da_glGenRenderbuffersEXT glGenRenderbuffersEXT;
    da_glRenderbufferStorageEXT glRenderbufferStorageEXT;
    da_glGetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT;
    da_glIsFramebufferEXT glIsFramebufferEXT;
    da_glBindFramebufferEXT glBindFramebufferEXT;
    da_glDeleteFramebuffersEXT glDeleteFramebuffersEXT;
    da_glGenFramebuffersEXT glGenFramebuffersEXT;
    da_glCheckFramebufferStatusEXT glCheckFramebufferStatusEXT;
    da_glFramebufferTexture1DEXT glFramebufferTexture1DEXT;
    da_glFramebufferTexture2DEXT glFramebufferTexture2DEXT;
    da_glFramebufferTexture3DEXT glFramebufferTexture3DEXT;
    da_glFramebufferRenderbufferEXT glFramebufferRenderbufferEXT;
    da_glGetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT;
    da_glGenerateMipmapEXT glGenerateMipmapEXT;
}

private __gshared bool _EXT_framebuffer_object;
bool EXT_framebuffer_object() @property { return _EXT_framebuffer_object; }
private void load_EXT_framebuffer_object() {
    try {
        bindGLFunc( cast( void** )&glIsRenderbufferEXT, "glIsRenderbufferEXT" );
        bindGLFunc( cast( void** )&glBindRenderbufferEXT, "glBindRenderbufferEXT" );
        bindGLFunc( cast( void** )&glDeleteRenderbuffersEXT, "glDeleteRenderbuffersEXT" );
        bindGLFunc( cast( void** )&glGenRenderbuffersEXT, "glGenRenderbuffersEXT" );
        bindGLFunc( cast( void** )&glRenderbufferStorageEXT, "glRenderbufferStorageEXT" );
        bindGLFunc( cast( void** )&glGetRenderbufferParameterivEXT, "glGetRenderbufferParameterivEXT" );
        bindGLFunc( cast( void** )&glIsFramebufferEXT, "glIsFramebufferEXT" );
        bindGLFunc( cast( void** )&glBindFramebufferEXT, "glBindFramebufferEXT" );
        bindGLFunc( cast( void** )&glDeleteFramebuffersEXT, "glDeleteFramebuffersEXT" );
        bindGLFunc( cast( void** )&glGenFramebuffersEXT, "glGenFramebuffersEXT" );
        bindGLFunc( cast( void** )&glCheckFramebufferStatusEXT, "glCheckFramebufferStatusEXT" );
        bindGLFunc( cast( void** )&glFramebufferTexture1DEXT, "glFramebufferTexture1DEXT" );
        bindGLFunc( cast( void** )&glFramebufferTexture2DEXT, "glFramebufferTexture2DEXT" );
        bindGLFunc( cast( void** )&glFramebufferTexture3DEXT, "glFramebufferTexture3DEXT" );
        bindGLFunc( cast( void** )&glFramebufferRenderbufferEXT, "glFramebufferRenderbufferEXT" );
        bindGLFunc( cast( void** )&glGetFramebufferAttachmentParameterivEXT, "glGetFramebufferAttachmentParameterivEXT" );
        bindGLFunc( cast( void** )&glGenerateMipmapEXT, "glGenerateMipmapEXT" );
        _EXT_framebuffer_object = true;
    } catch( Exception e ) {
        _EXT_framebuffer_object = false;
    }
}

// GL_EXT_direct_state_access
extern ( System ) nothrow {
    //    <OpenGL 1.1: New client commands>
    //
    alias da_glClientAttribDefaultEXT = void function(GLbitfield mask);
    alias da_glPushClientAttribDefaultEXT = void function(GLbitfield mask);
    
    //    <OpenGL 1.0: New matrix commands add "Matrix" prefix to name,
    //    drops "Matrix" suffix from name, and add initial "GLenum matrixMode"
    //    parameter>
    
    alias da_glMatrixLoadfEXT = void function(GLenum matrixMode, const float *m);
    alias da_glMatrixLoaddEXT = void function(GLenum matrixMode, const double *m);
    alias da_glMatrixMultfEXT = void function(GLenum matrixMode, const float *m);
    alias da_glMatrixMultdEXT = void function(GLenum matrixMode, const double *m);
    alias da_glMatrixLoadIdentityEXT = void function(GLenum matrixMode);
    alias da_glMatrixRotatefEXT = void function(GLenum matrixMode, float angle, float x, float y, float z);
    alias da_glMatrixRotatedEXT = void function(GLenum matrixMode, double angle, double x, double y, double z);
    alias da_glMatrixScalefEXT = void function(GLenum matrixMode, float x, float y, float z);
    alias da_glMatrixScaledEXT = void function(GLenum matrixMode, double x, double y, double z);
    alias da_glMatrixTranslatefEXT = void function(GLenum matrixMode, float x, float y, float z);
    alias da_glMatrixTranslatedEXT = void function(GLenum matrixMode, double x, double y, double z);
    alias da_glMatrixOrthoEXT = void function(GLenum matrixMode, double l, double r, double b, double t, double n, double f);
    alias da_glMatrixFrustumEXT = void function(GLenum matrixMode, double l, double r, double b, double t, double n, double f);
    alias da_glMatrixPushEXT = void function(GLenum matrixMode);
    alias da_glMatrixPopEXT = void function(GLenum matrixMode);
    
    //    <OpenGL 1.1: New texture object commands and queries replace "Tex"
    //    in name with "Texture" and add initial "uint texture" parameter>
    alias da_glTextureParameteriEXT = void function(uint texture, GLenum target, GLenum pname, int param);
    alias da_glTextureParameterivEXT = void function(uint texture, GLenum target, GLenum pname, const int *param);
    alias da_glTextureParameterfEXT = void function(uint texture, GLenum target, GLenum pname, float param);
    alias da_glTextureParameterfvEXT = void function(uint texture, GLenum target, GLenum pname, const float *param);
    alias da_glTextureImage1DEXT = void function(uint texture, GLenum target, int level, int internalformat, GLsizei width, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glTextureImage2DEXT = void function(uint texture, GLenum target, int level, int internalformat, GLsizei width, GLsizei height, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glTextureSubImage1DEXT = void function(uint texture, GLenum target, int level, int xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    alias da_glTextureSubImage2DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    alias da_glCopyTextureImage1DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, int x, int y, GLsizei width, int border);
    alias da_glCopyTextureImage2DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, int x, int y, GLsizei width, GLsizei height, int border);
    alias da_glCopyTextureSubImage1DEXT = void function(uint texture, GLenum target, int level, int xoffset, int x, int y, GLsizei width);
    alias da_glCopyTextureSubImage2DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, int x, int y, GLsizei width, GLsizei height);
    alias da_glGetTextureImageEXT = void function(uint texture, GLenum target, int level, GLenum format, GLenum type, void *pixels);
    alias da_glGetTextureParameterfvEXT = void function(uint texture, GLenum target, GLenum pname, float *params);
    alias da_glGetTextureParameterivEXT = void function(uint texture, GLenum target, GLenum pname, int *params);
    alias da_glGetTextureLevelParameterfvEXT = void function(uint texture, GLenum target, int level, GLenum pname, float *params);
    alias da_glGetTextureLevelParameterivEXT = void function(uint texture, GLenum target, int level, GLenum pname, int *params);
    
    //    <OpenGL 1.2: New 3D texture object commands replace "Tex" in name with
    //    "Texture" and adds initial "uint texture" parameter>
    alias da_glTextureImage3DEXT = void function(uint texture, GLenum target, int level, int internalformat, GLsizei width, GLsizei height, GLsizei depth, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glTextureSubImage3DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, int zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    alias da_glCopyTextureSubImage3DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, GLsizei width, GLsizei height);
    
    //    <OpenGL 1.2.1: New multitexture commands and queries prefix "Multi"
    //    before "Tex" and add an initial "GLenum texunit" parameter (to identify
    //    the texture unit).>
    
    alias da_glBindMultiTextureEXT = void function(GLenum texunit, GLenum target, uint texture);
    alias da_glMultiTexCoordPointerEXT = void function(GLenum texunit, int size, GLenum type, GLsizei stride, const void *pointer);
    alias da_glMultiTexEnvfEXT = void function(GLenum texunit, GLenum target, GLenum pname, float param);
    alias da_glMultiTexEnvfvEXT = void function(GLenum texunit, GLenum target, GLenum pname, const float *params);
    alias da_glMultiTexEnviEXT = void function(GLenum texunit, GLenum target, GLenum pname, int param);
    alias da_glMultiTexEnvivEXT = void function(GLenum texunit, GLenum target, GLenum pname, const int *params);
    alias da_glMultiTexGendEXT = void function(GLenum texunit, GLenum coord, GLenum pname, double param);
    alias da_glMultiTexGendvEXT = void function(GLenum texunit, GLenum coord, GLenum pname, const double *params);
    alias da_glMultiTexGenfEXT = void function(GLenum texunit, GLenum coord, GLenum pname, float param);
    alias da_glMultiTexGenfvEXT = void function(GLenum texunit, GLenum coord, GLenum pname, const float *params);
    alias da_glMultiTexGeniEXT = void function(GLenum texunit, GLenum coord, GLenum pname, int param);
    alias da_glMultiTexGenivEXT = void function(GLenum texunit, GLenum coord, GLenum pname, const int *params);
    alias da_glGetMultiTexEnvfvEXT = void function(GLenum texunit, GLenum target, GLenum pname, float *params);
    alias da_glGetMultiTexEnvivEXT = void function(GLenum texunit, GLenum target, GLenum pname, int *params);
    alias da_glGetMultiTexGendvEXT = void function(GLenum texunit, GLenum coord, GLenum pname, double *params);
    alias da_glGetMultiTexGenfvEXT = void function(GLenum texunit, GLenum coord, GLenum pname, float *params);
    alias da_glGetMultiTexGenivEXT = void function(GLenum texunit, GLenum coord, GLenum pname, int *params);
    alias da_glMultiTexParameteriEXT = void function(GLenum texunit, GLenum target, GLenum pname, int param);
    alias da_glMultiTexParameterivEXT = void function(GLenum texunit, GLenum target, GLenum pname, const int *param);
    alias da_glMultiTexParameterfEXT = void function(GLenum texunit, GLenum target, GLenum pname, float param);
    alias da_glMultiTexParameterfvEXT = void function(GLenum texunit, GLenum target, GLenum pname, const float *param);
    alias da_glMultiTexImage1DEXT = void function(GLenum texunit, GLenum target, int level, int internalformat, GLsizei width, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glMultiTexImage2DEXT = void function(GLenum texunit, GLenum target, int level, int internalformat, GLsizei width, GLsizei height, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glMultiTexSubImage1DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    alias da_glMultiTexSubImage2DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    alias da_glCopyMultiTexImage1DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, int x, int y, GLsizei width, int border);
    alias da_glCopyMultiTexImage2DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, int x, int y, GLsizei width, GLsizei height, int border);
    alias da_glCopyMultiTexSubImage1DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int x, int y, GLsizei width);
    alias da_glCopyMultiTexSubImage2DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, int x, int y, GLsizei width, GLsizei height);
    alias da_glGetMultiTexImageEXT = void function(GLenum texunit, GLenum target, int level, GLenum format, GLenum type, void *pixels);
    alias da_glGetMultiTexParameterfvEXT = void function(GLenum texunit, GLenum target, GLenum pname, float *params);
    alias da_glGetMultiTexParameterivEXT = void function(GLenum texunit, GLenum target, GLenum pname, int *params);
    alias da_glGetMultiTexLevelParameterfvEXT = void function(GLenum texunit, GLenum target, int level, GLenum pname, float *params);
    alias da_glGetMultiTexLevelParameterivEXT = void function(GLenum texunit, GLenum target, int level, GLenum pname, int *params);
    alias da_glMultiTexImage3DEXT = void function(GLenum texunit, GLenum target, int level, int internalformat, GLsizei width, GLsizei height, GLsizei depth, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glMultiTexSubImage3DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, int zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    alias da_glCopyMultiTexSubImage3DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, GLsizei width, GLsizei height);
    
    //    <OpenGL 1.2.1: New indexed texture commands and queries append
    //    "Indexed" to name and add "uint index" parameter (to identify the
    //    texture unit index) after state name parameters (if any) and before
    //    state value parameters>
    
    alias da_glEnableClientStateIndexedEXT = void function(GLenum array, uint index);
    alias da_glDisableClientStateIndexedEXT = void function(GLenum array, uint index);
    
    //    <OpenGL 3.0: New indexed texture commands and queries append "i"
    //    to name and add "uint index" parameter (to identify the texture
    //    unit index) after state name parameters (if any) and before state
    //    value parameters>
    
    alias da_glEnableClientStateiEXT = void function(GLenum array, uint index);
    alias da_glDisableClientStateiEXT = void function(GLenum array, uint index);
    
    //    <OpenGL 1.2.1: New indexed generic queries (added for indexed texture
    //   state) append "Indexed" to name and add "uint index" parameter
    //    (to identify the texture unit) after state name parameters (if any) and
    //    before state value parameters>
    
    alias da_glGetFloatIndexedvEXT = void function(GLenum target, uint index, float *params);
    alias da_glGetDoubleIndexedvEXT = void function(GLenum target, uint index, double *params);
    alias da_glGetPointerIndexedvEXT = void function(GLenum target, uint index, void **params);
    
    //    <OpenGL 3.0: New indexed generic queries (added for indexed texture
    //    state) replace "v" for "i_v" to name and add "uint index" parameter
    //    (to identify the texture unit) after state name parameters (if any)
    //    and before state value parameters>
    
    alias da_glGetFloati_vEXT = void function(GLenum pname, uint index, float *params);
    alias da_glGetDoublei_vEXT = void function(GLenum pname, uint index, double *params);
    alias da_glGetPointeri_vEXT = void function(GLenum pname, uint index, void **params);
    
    //    <OpenGL 1.2.1:  Extend the functionality of these EXT_draw_buffers2
    //    commands and queries for multitexture>
    
    alias da_glEnableIndexedEXT = void function(GLenum cap, uint index);
    alias da_glDisableIndexedEXT = void function(GLenum cap, uint index);
    alias da_glIsEnabledIndexedEXT = GLboolean function(GLenum target, uint index);
    alias da_glGetIntegerIndexedvEXT = void function(GLenum target, uint index, int *params);
    alias da_glGetGLbooleanIndexedvEXT = void function(GLenum target, uint index, GLboolean *params);
    
    //    <ARB_vertex_program: New program commands and queries add "Named"
    //    prefix to name and adds initial "uint program" parameter>
    
    alias da_glNamedProgramStringEXT = void function(uint program, GLenum target, GLenum format, GLsizei len, const void *string); 
    alias da_glNamedProgramLocalParameter4dEXT = void function(uint program, GLenum target, uint index, double x, double y, double z, double w);
    alias da_glNamedProgramLocalParameter4dvEXT = void function(uint program, GLenum target, uint index, const double *params);
    alias da_glNamedProgramLocalParameter4fEXT = void function(uint program, GLenum target, uint index, float x, float y, float z, float w);
    alias da_glNamedProgramLocalParameter4fvEXT = void function(uint program, GLenum target, uint index, const float *params);
    alias da_glGetNamedProgramLocalParameterdvEXT = void function(uint program, GLenum target, uint index, double *params);
    alias da_glGetNamedProgramLocalParameterfvEXT = void function(uint program, GLenum target, uint index, float *params);
    alias da_glGetNamedProgramivEXT = void function(uint program, GLenum target, GLenum pname, int *params);
    alias da_glGetNamedProgramStringEXT = void function(uint program, GLenum target, GLenum pname, void *string);
    
    //    <OpenGL 1.3: New compressed texture object commands replace "Tex"
    //    in name with "Texture" and add initial "uint texture" parameter>
    
    alias da_glCompressedTextureImage3DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureImage2DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, GLsizei width, GLsizei height, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureImage1DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, GLsizei width, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureSubImage3DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, int zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureSubImage2DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureSubImage1DEXT = void function(uint texture, GLenum target, int level, int xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    alias da_glGetCompressedTextureImageEXT = void function(uint texture, GLenum target, int level, void *img);
    
    //    <OpenGL 1.3: New multitexture compressed texture commands and queries
    //    prefix "Multi" before "Tex" and add an initial "GLenum texunit"
    //    parameter (to identify the texture unit).>
    
    alias da_glCompressedMultiTexImage3DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexImage2DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, GLsizei width, GLsizei height, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexImage1DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, GLsizei width, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexSubImage3DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, int zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexSubImage2DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexSubImage1DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    alias da_glGetCompressedMultiTexImageEXT = void function(GLenum texunit, GLenum target, int level, void *img);
    
    //    <OpenGL 1.3: New transpose matrix commands add "Matrix" suffix
    //    to name, drops "Matrix" suffix from name, and add initial "GLenum
    //    matrixMode" parameter>
    
    alias da_glMatrixLoadTransposefEXT = void function(GLenum matrixMode, const float *m);
    alias da_glMatrixLoadTransposedEXT = void function(GLenum matrixMode, const double *m);
    alias da_glMatrixMultTransposefEXT = void function(GLenum matrixMode, const float *m);
    alias da_glMatrixMultTransposedEXT = void function(GLenum matrixMode, const double *m);
    
    //    <OpenGL 1.5: New buffer commands and queries replace "Buffer" with
    //    "NamedBuffer" in name and replace "GLenum target" parameter with
    //    "uint buffer">
    
    alias da_glNamedBufferDataEXT = void function(uint buffer, GLsizeiptr size, const void *data, GLenum usage);
    alias da_glNamedBufferSubDataEXT = void function(uint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    alias da_glMapNamedBufferEXT = void* function(uint buffer, GLenum access);
    alias da_glUnmapNamedBufferEXT = GLboolean function(uint buffer);
    alias da_glGetNamedBufferParameterivEXT = void function(uint buffer, GLenum pname, int *params);
    alias da_glGetNamedBufferPointervEXT = void function(uint buffer, GLenum pname, void* *params);
    alias da_glGetNamedBufferSubDataEXT = void function(uint buffer, GLintptr offset, GLsizeiptr size, void *data);
    
    //    <OpenGL 2.0: New uniform commands add "Program" prefix to name and
    //    add initial "uint program" parameter>
    
    alias da_glProgramUniform1fEXT = void function(uint program, int location, float v0);
    alias da_glProgramUniform2fEXT = void function(uint program, int location, float v0, float v1);
    alias da_glProgramUniform3fEXT = void function(uint program, int location, float v0, float v1, float v2);
    alias da_glProgramUniform4fEXT = void function(uint program, int location, float v0, float v1, float v2, float v3);
    alias da_glProgramUniform1iEXT = void function(uint program, int location, int v0);
    alias da_glProgramUniform2iEXT = void function(uint program, int location, int v0, int v1);
    alias da_glProgramUniform3iEXT = void function(uint program, int location, int v0, int v1, int v2);
    alias da_glProgramUniform4iEXT = void function(uint program, int location, int v0, int v1, int v2, int v3);
    alias da_glProgramUniform1fvEXT = void function(uint program, int location, GLsizei count, const float *value);
    alias da_glProgramUniform2fvEXT = void function(uint program, int location, GLsizei count, const float *value);
    alias da_glProgramUniform3fvEXT = void function(uint program, int location, GLsizei count, const float *value);
    alias da_glProgramUniform4fvEXT = void function(uint program, int location, GLsizei count, const float *value);
    alias da_glProgramUniform1ivEXT = void function(uint program, int location, GLsizei count, const int *value);
    alias da_glProgramUniform2ivEXT = void function(uint program, int location, GLsizei count, const int *value);
    alias da_glProgramUniform3ivEXT = void function(uint program, int location, GLsizei count, const int *value);
    alias da_glProgramUniform4ivEXT = void function(uint program, int location, GLsizei count, const int *value);
    alias da_glProgramUniformMatrix2fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix3fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix4fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    
    //    <OpenGL 2.1: New uniform matrix commands add "Program" prefix to
    //    name and add initial "uint program" parameter>
    
    alias da_glProgramUniformMatrix2x3fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix3x2fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix2x4fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix4x2fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix3x4fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix4x3fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    
    //    <EXT_texture_buffer_object:  New texture buffer object command
    //    replaces "Tex" in name with "Texture" and adds initial "uint texture"
    //    parameter>
    
    alias da_glTextureBufferEXT = void function(uint texture, GLenum target, GLenum internalformat, uint buffer);
    
    //    <EXT_texture_buffer_object: New multitexture texture buffer command
    //    prefixes "Multi" before "Tex" and add an initial "GLenum texunit"
    //    parameter (to identify the texture unit).>
    
    alias da_glMultiTexBufferEXT = void function(GLenum texunit, GLenum target, GLenum internalformat, uint buffer);
    
    //    <EXT_texture_integer: New integer texture object commands and queries
    //    replace "Tex" in name with "Texture" and add initial "uint texture"
    //    parameter>
    
    alias da_glTextureParameterIivEXT = void function(uint texture, GLenum target, GLenum pname, const int *params);
    alias da_glTextureParameterIuivEXT = void function(uint texture, GLenum target, GLenum pname, const uint *params);
    alias da_glGetTextureParameterIivEXT = void function(uint texture, GLenum target, GLenum pname, int *params);
    alias da_glGetTextureParameterIuivEXT = void function(uint texture, GLenum target, GLenum pname, uint *params);
    
    //    <EXT_texture_integer: New multitexture integer texture commands and
    //    queries prefix "Multi" before "Tex" and add an initial "GLenum texunit"
    //    parameter (to identify the texture unit).>
    
    alias da_glMultiTexParameterIivEXT = void function(GLenum texunit, GLenum target, GLenum pname, const int *params);
    alias da_glMultiTexParameterIuivEXT = void function(GLenum texunit, GLenum target, GLenum pname, const uint *params);
    alias da_glGetMultiTexParameterIivEXT = void function(GLenum texunit, GLenum target, GLenum pname, int *params);
    alias da_glGetMultiTexParameterIuivEXT = void function(GLenum texunit, GLenum target, GLenum pname, uint *params);
    
    //    <EXT_gpu_shader4: New integer uniform commands add "Program" prefix
    //    to name and add initial "uint program" parameter>
    
    alias da_glProgramUniform1uiEXT = void function(uint program, int location, uint v0);
    alias da_glProgramUniform2uiEXT = void function(uint program, int location, uint v0, uint v1);
    alias da_glProgramUniform3uiEXT = void function(uint program, int location, uint v0, uint v1, uint v2);
    alias da_glProgramUniform4uiEXT = void function(uint program, int location, uint v0, uint v1, uint v2, uint v3);
    alias da_glProgramUniform1uivEXT = void function(uint program, int location, GLsizei count, const uint *value);
    alias da_glProgramUniform2uivEXT = void function(uint program, int location, GLsizei count, const uint *value);
    alias da_glProgramUniform3uivEXT = void function(uint program, int location, GLsizei count, const uint *value);
    alias da_glProgramUniform4uivEXT = void function(uint program, int location, GLsizei count, const uint *value);
    
    //    <EXT_gpu_program_parameters: New program command adds "Named" prefix
    //   to name and adds "uint program" parameter>
    
    alias da_glNamedProgramLocalParameters4fvEXT = void function(uint program, GLenum target, uint index, GLsizei count, const float *params); 
    
    //    <NV_gpu_program4: New program commands and queries add "Named"
    //    prefix to name and replace "GLenum target" with "uint program">
    
    alias da_glNamedProgramLocalParameterI4iEXT = void function(uint program, GLenum target, uint index, int x, int y, int z, int w);
    alias da_glNamedProgramLocalParameterI4ivEXT = void function(uint program, GLenum target, uint index, const int *params);
    alias da_glNamedProgramLocalParametersI4ivEXT = void function(uint program, GLenum target, uint index, GLsizei count, const int *params);
    alias da_glNamedProgramLocalParameterI4uiEXT = void function(uint program, GLenum target, uint index, uint x, uint y, uint z, uint w);
    alias da_glNamedProgramLocalParameterI4uivEXT = void function(uint program, GLenum target, uint index, const uint *params);
    alias da_glNamedProgramLocalParametersI4uivEXT = void function(uint program, GLenum target, uint index, GLsizei count, const uint *params);
    alias da_glGetNamedProgramLocalParameterIivEXT = void function(uint program, GLenum target, uint index, int *params);
    alias da_glGetNamedProgramLocalParameterIuivEXT = void function(uint program, GLenum target, uint index, uint *params);
    
    //    <OpenGL 3.0: New renderbuffer commands add "Named" prefix to name
    //    and replace "GLenum target" with "uint renderbuffer">
    
    alias da_glNamedRenderbufferStorageEXT = void function(uint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    alias da_glGetNamedRenderbufferParameterivEXT = void function(uint renderbuffer, GLenum pname, int *params);
    
    //    <OpenGL 3.0: New renderbuffer commands add "Named"
    //    prefix to name and replace "GLenum target" with "uint renderbuffer">
    
    alias da_glNamedRenderbufferStorageMultisampleEXT = void function(uint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    
    //    <NV_framebuffer_multisample_coverage: New renderbuffer commands
    //    add "Named" prefix to name and replace "GLenum target" with "uint
    //    renderbuffer">
    
    alias da_glNamedRenderbufferStorageMultisampleCoverageEXT = void function(uint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
    
    //    <OpenGL 3.0: New framebuffer commands add "Named" prefix to name
    //    and replace "GLenum target" with "uint framebuffer">
    
    alias da_glCheckNamedFramebufferStatusEXT = GLenum function(uint framebuffer, GLenum target);
    alias da_glNamedFramebufferTexture1DEXT = void function(uint framebuffer, GLenum attachment, GLenum textarget, uint texture, int level);
    alias da_glNamedFramebufferTexture2DEXT = void function(uint framebuffer, GLenum attachment, GLenum textarget, uint texture, int level);
    alias da_glNamedFramebufferTexture3DEXT = void function(uint framebuffer, GLenum attachment, GLenum textarget, uint texture, int level, int zoffset);
    alias da_glNamedFramebufferRenderbufferEXT = void function(uint framebuffer, GLenum attachment, GLenum renderbuffertarget, uint renderbuffer);
    alias da_glGetNamedFramebufferAttachmentParameterivEXT = void function(uint framebuffer, GLenum attachment, GLenum pname, int *params);
    
    //    <OpenGL 3.0: New texture commands add "Texture" within name and
    //    replace "GLenum target" with "uint texture">
    
    alias da_glGenerateTextureMipmapEXT = void function(uint texture, GLenum target);
    
    //    <OpenGL 3.0: New texture commands add "MultiTex" within name and
    //    replace "GLenum target" with "GLenum texunit">
    
    alias da_glGenerateMultiTexMipmapEXT = void function(GLenum texunit, GLenum target);
    
    //    <OpenGL 3.0: New framebuffer commands>
    
    alias da_glFramebufferDrawBufferEXT = void function(uint framebuffer, GLenum mode);
    alias da_glFramebufferDrawBuffersEXT = void function(uint framebuffer, GLsizei n, const GLenum *bufs);
    alias da_glFramebufferReadBufferEXT = void function(uint framebuffer, GLenum mode);
    
    //    <OpenGL 3.0: New framebuffer query>
    
    alias da_glGetFramebufferParameterivEXT = void function(uint framebuffer, GLenum pname, int *param);
    
    //    <OpenGL 3.0: New buffer data copy command>
    alias da_glNamedCopyBufferSubDataEXT = void function(uint readBuffer, uint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    
    //    <EXT_geometry_shader4 or NV_gpu_program4: New framebuffer commands
    //    add "Named" prefix to name and replace "GLenum target" with "uint
    //    framebuffer">
    
    alias da_glNamedFramebufferTextureEXT = void function(uint framebuffer, GLenum attachment, uint texture, int level);
    alias da_glNamedFramebufferTextureLayerEXT = void function(uint framebuffer, GLenum attachment, uint texture, int level, int layer);
    alias da_glNamedFramebufferTextureFaceEXT = void function(uint framebuffer, GLenum attachment, uint texture, int level, GLenum face);
    
    //    <NV_explicit_multisample:  New texture renderbuffer object command
    //    replaces "Tex" in name with "Texture" and add initial "uint texture"
    //    parameter> 
    
    alias da_glTextureRenderbufferEXT = void function(uint texture, GLenum target, uint renderbuffer);
    
    //    <NV_explicit_multisample: New multitexture texture renderbuffer command
    //    prefixes "Multi" before "Tex" and add an initial "GLenum texunit"
    //    parameter (to identify the texture unit)>
    
    alias da_glMultiTexRenderbufferEXT = void function(GLenum texunit, GLenum target, uint renderbuffer);
    
    //    <OpenGL 3.0: New vertex array specification commands for vertex
    //    array objects prefix "VertexArray", add initial "uint vaobj" and
    //    "uint buffer" parameters, change "Pointer" suffix to "Offset",
    //    and change the final parameter from "const void *" to "intptr offset">
    
    alias da_glVertexArrayVertexOffsetEXT = void function(uint vaobj, uint buffer, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayColorOffsetEXT = void function(uint vaobj, uint buffer, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayEdgeFlagOffsetEXT = void function(uint vaobj, uint buffer, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayIndexOffsetEXT = void function(uint vaobj, uint buffer, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayNormalOffsetEXT = void function(uint vaobj, uint buffer, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayTexCoordOffsetEXT = void function(uint vaobj, uint buffer, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayMultiTexCoordOffsetEXT = void function(uint vaobj, uint buffer, GLenum texunit, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayFogCoordOffsetEXT = void function(uint vaobj, uint buffer, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArraySecondaryColorOffsetEXT = void function(uint vaobj, uint buffer, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayVertexAttribOffsetEXT = void function(uint vaobj, uint buffer, uint index, int size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayVertexAttribIOffsetEXT = void function(uint vaobj, uint buffer, uint index, int size, GLenum type, GLsizei stride, GLintptr offset);
    
    //    <OpenGL 3.0: New vertex array enable commands for vertex array
    //    objects change "ClientState" to "VertexArray" and add an initial
    //    "uint vaobj" parameter>
    
    alias da_glEnableVertexArrayEXT = void function(uint vaobj, GLenum array);
    alias da_glDisableVertexArrayEXT = void function(uint vaobj, GLenum array);
    
    //    <OpenGL 3.0: New vertex attrib array enable commands for vertex
    //    array objects change "VertexAttribArray" to "VertexArrayAttrib"
    //    and add an initial "uint vaobj" parameter>
    
    alias da_glEnableVertexArrayAttribEXT = void function(uint vaobj, uint index);
    alias da_glDisableVertexArrayAttribEXT = void function(uint vaobj, uint index);
    
    //    <OpenGL 3.0: New queries for vertex array objects>
    
    alias da_glGetVertexArrayIntegervEXT = void function(uint vaobj, GLenum pname, int *param);
    alias da_glGetVertexArrayPointervEXT = void function(uint vaobj, GLenum pname, void **param);
    alias da_glGetVertexArrayIntegeri_vEXT = void function(uint vaobj, uint index, GLenum pname, int *param);
    alias da_glGetVertexArrayPointeri_vEXT = void function(uint vaobj, uint index, GLenum pname, void **param);
    
    //    <OpenGL 3.0: New buffer commands replace "Buffer" with "NamedBuffer"
    //    in name and replace "GLenum target" parameter with "uint buffer">
    
    alias da_glMapNamedBufferRangeEXT = void* function(uint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
    alias da_glFlushMappedNamedBufferRangeEXT = void function(uint buffer, GLintptr offset, GLsizeiptr length);
}

__gshared {
    da_glClientAttribDefaultEXT glClientAttribDefaultEXT;
    da_glPushClientAttribDefaultEXT glPushClientAttribDefaultEXT;
    da_glMatrixLoadfEXT glMatrixLoadfEXT;
    da_glMatrixLoaddEXT glMatrixLoaddEXT;
    da_glMatrixMultfEXT glMatrixMultfEXT;
    da_glMatrixMultdEXT glMatrixMultdEXT;
    da_glMatrixLoadIdentityEXT glMatrixLoadIdentityEXT;
    da_glMatrixRotatefEXT glMatrixRotatefEXT;
    da_glMatrixRotatedEXT glMatrixRotatedEXT;
    da_glMatrixScalefEXT glMatrixScalefEXT;
    da_glMatrixScaledEXT glMatrixScaledEXT;
    da_glMatrixTranslatefEXT glMatrixTranslatefEXT;
    da_glMatrixTranslatedEXT glMatrixTranslatedEXT;
    da_glMatrixOrthoEXT glMatrixOrthoEXT;
    da_glMatrixFrustumEXT glMatrixFrustumEXT;
    da_glMatrixPushEXT glMatrixPushEXT;
    da_glMatrixPopEXT glMatrixPopEXT;
    da_glTextureParameteriEXT glTextureParameteriEXT;
    da_glTextureParameterivEXT glTextureParameterivEXT;
    da_glTextureParameterfEXT glTextureParameterfEXT;
    da_glTextureParameterfvEXT glTextureParameterfvEXT;
    da_glTextureImage1DEXT glTextureImage1DEXT;
    da_glTextureImage2DEXT glTextureImage2DEXT;
    da_glTextureSubImage1DEXT glTextureSubImage1DEXT;
    da_glTextureSubImage2DEXT glTextureSubImage2DEXT;
    da_glCopyTextureImage1DEXT glCopyTextureImage1DEXT;
    da_glCopyTextureImage2DEXT glCopyTextureImage2DEXT;
    da_glCopyTextureSubImage1DEXT glCopyTextureSubImage1DEXT;
    da_glCopyTextureSubImage2DEXT glCopyTextureSubImage2DEXT;
    da_glGetTextureImageEXT glGetTextureImageEXT;
    da_glGetTextureParameterfvEXT glGetTextureParameterfvEXT;
    da_glGetTextureParameterivEXT glGetTextureParameterivEXT;
    da_glGetTextureLevelParameterfvEXT glGetTextureLevelParameterfvEXT;
    da_glGetTextureLevelParameterivEXT glGetTextureLevelParameterivEXT;
    da_glTextureImage3DEXT glTextureImage3DEXT;
    da_glTextureSubImage3DEXT glTextureSubImage3DEXT;
    da_glCopyTextureSubImage3DEXT glCopyTextureSubImage3DEXT;
    da_glBindMultiTextureEXT glBindMultiTextureEXT;
    da_glMultiTexCoordPointerEXT glMultiTexCoordPointerEXT;
    da_glMultiTexEnvfEXT glMultiTexEnvfEXT;
    da_glMultiTexEnvfvEXT glMultiTexEnvfvEXT;
    da_glMultiTexEnviEXT glMultiTexEnviEXT;
    da_glMultiTexEnvivEXT glMultiTexEnvivEXT;
    da_glMultiTexGendEXT glMultiTexGendEXT;
    da_glMultiTexGendvEXT glMultiTexGendvEXT;
    da_glMultiTexGenfEXT glMultiTexGenfEXT;
    da_glMultiTexGenfvEXT glMultiTexGenfvEXT;
    da_glMultiTexGeniEXT glMultiTexGeniEXT;
    da_glMultiTexGenivEXT glMultiTexGenivEXT;
    da_glGetMultiTexEnvfvEXT glGetMultiTexEnvfvEXT;
    da_glGetMultiTexEnvivEXT glGetMultiTexEnvivEXT;
    da_glGetMultiTexGendvEXT glGetMultiTexGendvEXT;
    da_glGetMultiTexGenfvEXT glGetMultiTexGenfvEXT;
    da_glGetMultiTexGenivEXT glGetMultiTexGenivEXT;
    da_glMultiTexParameteriEXT glMultiTexParameteriEXT;
    da_glMultiTexParameterivEXT glMultiTexParameterivEXT;
    da_glMultiTexParameterfEXT glMultiTexParameterfEXT;
    da_glMultiTexParameterfvEXT glMultiTexParameterfvEXT;
    da_glMultiTexImage1DEXT glMultiTexImage1DEXT;
    da_glMultiTexImage2DEXT glMultiTexImage2DEXT;
    da_glMultiTexSubImage1DEXT glMultiTexSubImage1DEXT;
    da_glMultiTexSubImage2DEXT glMultiTexSubImage2DEXT;
    da_glCopyMultiTexImage1DEXT glCopyMultiTexImage1DEXT;
    da_glCopyMultiTexImage2DEXT glCopyMultiTexImage2DEXT;
    da_glCopyMultiTexSubImage1DEXT glCopyMultiTexSubImage1DEXT;
    da_glCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage2DEXT;
    da_glGetMultiTexImageEXT glGetMultiTexImageEXT;
    da_glGetMultiTexParameterfvEXT glGetMultiTexParameterfvEXT;
    da_glGetMultiTexParameterivEXT glGetMultiTexParameterivEXT;
    da_glGetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterfvEXT;
    da_glGetMultiTexLevelParameterivEXT glGetMultiTexLevelParameterivEXT;
    da_glMultiTexImage3DEXT glMultiTexImage3DEXT;
    da_glMultiTexSubImage3DEXT glMultiTexSubImage3DEXT;
    da_glCopyMultiTexSubImage3DEXT glCopyMultiTexSubImage3DEXT;
    da_glEnableClientStateIndexedEXT glEnableClientStateIndexedEXT;
    da_glDisableClientStateIndexedEXT glDisableClientStateIndexedEXT;
    da_glEnableClientStateiEXT glEnableClientStateiEXT;
    da_glDisableClientStateiEXT glDisableClientStateiEXT;
    da_glGetFloatIndexedvEXT glGetFloatIndexedvEXT;
    da_glGetDoubleIndexedvEXT glGetDoubleIndexedvEXT;
    da_glGetPointerIndexedvEXT glGetPointerIndexedvEXT;
    da_glGetFloati_vEXT glGetFloati_vEXT;
    da_glGetDoublei_vEXT glGetDoublei_vEXT;
    da_glGetPointeri_vEXT glGetPointeri_vEXT;
    da_glEnableIndexedEXT glEnableIndexedEXT;
    da_glDisableIndexedEXT glDisableIndexedEXT;
    da_glIsEnabledIndexedEXT glIsEnabledIndexedEXT;
    da_glGetIntegerIndexedvEXT glGetIntegerIndexedvEXT;
    da_glGetGLbooleanIndexedvEXT glGetGLbooleanIndexedvEXT;
    da_glNamedProgramStringEXT glNamedProgramStringEXT;
    da_glNamedProgramLocalParameter4dEXT glNamedProgramLocalParameter4dEXT;
    da_glNamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4dvEXT;
    da_glNamedProgramLocalParameter4fEXT glNamedProgramLocalParameter4fEXT;
    da_glNamedProgramLocalParameter4fvEXT glNamedProgramLocalParameter4fvEXT;
    da_glGetNamedProgramLocalParameterdvEXT glGetNamedProgramLocalParameterdvEXT;
    da_glGetNamedProgramLocalParameterfvEXT glGetNamedProgramLocalParameterfvEXT;
    da_glGetNamedProgramivEXT glGetNamedProgramivEXT;
    da_glGetNamedProgramStringEXT glGetNamedProgramStringEXT;
    da_glCompressedTextureImage3DEXT glCompressedTextureImage3DEXT;
    da_glCompressedTextureImage2DEXT glCompressedTextureImage2DEXT;
    da_glCompressedTextureImage1DEXT glCompressedTextureImage1DEXT;
    da_glCompressedTextureSubImage3DEXT glCompressedTextureSubImage3DEXT;
    da_glCompressedTextureSubImage2DEXT glCompressedTextureSubImage2DEXT;
    da_glCompressedTextureSubImage1DEXT glCompressedTextureSubImage1DEXT;
    da_glGetCompressedTextureImageEXT glGetCompressedTextureImageEXT;
    da_glCompressedMultiTexImage3DEXT glCompressedMultiTexImage3DEXT;
    da_glCompressedMultiTexImage2DEXT glCompressedMultiTexImage2DEXT;
    da_glCompressedMultiTexImage1DEXT glCompressedMultiTexImage1DEXT;
    da_glCompressedMultiTexSubImage3DEXT glCompressedMultiTexSubImage3DEXT;
    da_glCompressedMultiTexSubImage2DEXT glCompressedMultiTexSubImage2DEXT;
    da_glCompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage1DEXT;
    da_glGetCompressedMultiTexImageEXT glGetCompressedMultiTexImageEXT;
    da_glMatrixLoadTransposefEXT glMatrixLoadTransposefEXT;
    da_glMatrixLoadTransposedEXT glMatrixLoadTransposedEXT;
    da_glMatrixMultTransposefEXT glMatrixMultTransposefEXT;
    da_glMatrixMultTransposedEXT glMatrixMultTransposedEXT;
    da_glNamedBufferDataEXT glNamedBufferDataEXT;
    da_glNamedBufferSubDataEXT glNamedBufferSubDataEXT;
    da_glMapNamedBufferEXT glMapNamedBufferEXT;
    da_glUnmapNamedBufferEXT glUnmapNamedBufferEXT;
    da_glGetNamedBufferParameterivEXT glGetNamedBufferParameterivEXT;
    da_glGetNamedBufferPointervEXT glGetNamedBufferPointervEXT;
    da_glGetNamedBufferSubDataEXT glGetNamedBufferSubDataEXT;
    da_glProgramUniform1fEXT glProgramUniform1fEXT;
    da_glProgramUniform2fEXT glProgramUniform2fEXT;
    da_glProgramUniform3fEXT glProgramUniform3fEXT;
    da_glProgramUniform4fEXT glProgramUniform4fEXT;
    da_glProgramUniform1iEXT glProgramUniform1iEXT;
    da_glProgramUniform2iEXT glProgramUniform2iEXT;
    da_glProgramUniform3iEXT glProgramUniform3iEXT;
    da_glProgramUniform4iEXT glProgramUniform4iEXT;
    da_glProgramUniform1fvEXT glProgramUniform1fvEXT;
    da_glProgramUniform2fvEXT glProgramUniform2fvEXT;
    da_glProgramUniform3fvEXT glProgramUniform3fvEXT;
    da_glProgramUniform4fvEXT glProgramUniform4fvEXT;
    da_glProgramUniform1ivEXT glProgramUniform1ivEXT;
    da_glProgramUniform2ivEXT glProgramUniform2ivEXT;
    da_glProgramUniform3ivEXT glProgramUniform3ivEXT;
    da_glProgramUniform4ivEXT glProgramUniform4ivEXT;
    da_glProgramUniformMatrix2fvEXT glProgramUniformMatrix2fvEXT;
    da_glProgramUniformMatrix3fvEXT glProgramUniformMatrix3fvEXT;
    da_glProgramUniformMatrix4fvEXT glProgramUniformMatrix4fvEXT;
    da_glProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x3fvEXT;
    da_glProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x2fvEXT;
    da_glProgramUniformMatrix2x4fvEXT glProgramUniformMatrix2x4fvEXT;
    da_glProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x2fvEXT;
    da_glProgramUniformMatrix3x4fvEXT glProgramUniformMatrix3x4fvEXT;
    da_glProgramUniformMatrix4x3fvEXT glProgramUniformMatrix4x3fvEXT;
    da_glTextureBufferEXT glTextureBufferEXT;
    da_glMultiTexBufferEXT glMultiTexBufferEXT;
    da_glTextureParameterIivEXT glTextureParameterIivEXT;
    da_glTextureParameterIuivEXT glTextureParameterIuivEXT;
    da_glGetTextureParameterIivEXT glGetTextureParameterIivEXT;
    da_glGetTextureParameterIuivEXT glGetTextureParameterIuivEXT;
    da_glMultiTexParameterIivEXT glMultiTexParameterIivEXT;
    da_glMultiTexParameterIuivEXT glMultiTexParameterIuivEXT;
    da_glGetMultiTexParameterIivEXT glGetMultiTexParameterIivEXT;
    da_glGetMultiTexParameterIuivEXT glGetMultiTexParameterIuivEXT;
    da_glProgramUniform1uiEXT glProgramUniform1uiEXT;
    da_glProgramUniform2uiEXT glProgramUniform2uiEXT;
    da_glProgramUniform3uiEXT glProgramUniform3uiEXT;
    da_glProgramUniform4uiEXT glProgramUniform4uiEXT;
    da_glProgramUniform1uivEXT glProgramUniform1uivEXT;
    da_glProgramUniform2uivEXT glProgramUniform2uivEXT;
    da_glProgramUniform3uivEXT glProgramUniform3uivEXT;
    da_glProgramUniform4uivEXT glProgramUniform4uivEXT;
    da_glNamedProgramLocalParameters4fvEXT glNamedProgramLocalParameters4fvEXT;
    da_glNamedProgramLocalParameterI4iEXT glNamedProgramLocalParameterI4iEXT;
    da_glNamedProgramLocalParameterI4ivEXT glNamedProgramLocalParameterI4ivEXT;
    da_glNamedProgramLocalParametersI4ivEXT glNamedProgramLocalParametersI4ivEXT;
    da_glNamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameterI4uiEXT;
    da_glNamedProgramLocalParameterI4uivEXT glNamedProgramLocalParameterI4uivEXT;
    da_glNamedProgramLocalParametersI4uivEXT glNamedProgramLocalParametersI4uivEXT;
    da_glGetNamedProgramLocalParameterIivEXT glGetNamedProgramLocalParameterIivEXT;
    da_glGetNamedProgramLocalParameterIuivEXT glGetNamedProgramLocalParameterIuivEXT;
    da_glNamedRenderbufferStorageEXT glNamedRenderbufferStorageEXT;
    da_glGetNamedRenderbufferParameterivEXT glGetNamedRenderbufferParameterivEXT;
    da_glNamedRenderbufferStorageMultisampleEXT glNamedRenderbufferStorageMultisampleEXT;
    da_glNamedRenderbufferStorageMultisampleCoverageEXT glNamedRenderbufferStorageMultisampleCoverageEXT;
    da_glCheckNamedFramebufferStatusEXT glCheckNamedFramebufferStatusEXT;
    da_glNamedFramebufferTexture1DEXT glNamedFramebufferTexture1DEXT;
    da_glNamedFramebufferTexture2DEXT glNamedFramebufferTexture2DEXT;
    da_glNamedFramebufferTexture3DEXT glNamedFramebufferTexture3DEXT;
    da_glNamedFramebufferRenderbufferEXT glNamedFramebufferRenderbufferEXT;
    da_glGetNamedFramebufferAttachmentParameterivEXT glGetNamedFramebufferAttachmentParameterivEXT;
    da_glGenerateTextureMipmapEXT glGenerateTextureMipmapEXT;
    da_glGenerateMultiTexMipmapEXT glGenerateMultiTexMipmapEXT;
    da_glFramebufferDrawBufferEXT glFramebufferDrawBufferEXT;
    da_glFramebufferDrawBuffersEXT glFramebufferDrawBuffersEXT;
    da_glFramebufferReadBufferEXT glFramebufferReadBufferEXT;
    da_glGetFramebufferParameterivEXT glGetFramebufferParameterivEXT;
    da_glNamedCopyBufferSubDataEXT glNamedCopyBufferSubDataEXT;
    da_glNamedFramebufferTextureEXT glNamedFramebufferTextureEXT;
    da_glNamedFramebufferTextureLayerEXT glNamedFramebufferTextureLayerEXT;
    da_glNamedFramebufferTextureFaceEXT glNamedFramebufferTextureFaceEXT;
    da_glTextureRenderbufferEXT glTextureRenderbufferEXT;
    da_glMultiTexRenderbufferEXT glMultiTexRenderbufferEXT;
    da_glVertexArrayVertexOffsetEXT glVertexArrayVertexOffsetEXT;
    da_glVertexArrayColorOffsetEXT glVertexArrayColorOffsetEXT;
    da_glVertexArrayEdgeFlagOffsetEXT glVertexArrayEdgeFlagOffsetEXT;
    da_glVertexArrayIndexOffsetEXT glVertexArrayIndexOffsetEXT;
    da_glVertexArrayNormalOffsetEXT glVertexArrayNormalOffsetEXT;
    da_glVertexArrayTexCoordOffsetEXT glVertexArrayTexCoordOffsetEXT;
    da_glVertexArrayMultiTexCoordOffsetEXT glVertexArrayMultiTexCoordOffsetEXT;
    da_glVertexArrayFogCoordOffsetEXT glVertexArrayFogCoordOffsetEXT;
    da_glVertexArraySecondaryColorOffsetEXT glVertexArraySecondaryColorOffsetEXT;
    da_glVertexArrayVertexAttribOffsetEXT glVertexArrayVertexAttribOffsetEXT;
    da_glVertexArrayVertexAttribIOffsetEXT glVertexArrayVertexAttribIOffsetEXT;
    da_glEnableVertexArrayEXT glEnableVertexArrayEXT;
    da_glDisableVertexArrayEXT glDisableVertexArrayEXT;
    da_glEnableVertexArrayAttribEXT glEnableVertexArrayAttribEXT;
    da_glDisableVertexArrayAttribEXT glDisableVertexArrayAttribEXT;
    da_glGetVertexArrayIntegervEXT glGetVertexArrayIntegervEXT;
    da_glGetVertexArrayPointervEXT glGetVertexArrayPointervEXT;
    da_glGetVertexArrayIntegeri_vEXT glGetVertexArrayIntegeri_vEXT;
    da_glGetVertexArrayPointeri_vEXT glGetVertexArrayPointeri_vEXT;
    da_glMapNamedBufferRangeEXT glMapNamedBufferRangeEXT;
    da_glFlushMappedNamedBufferRangeEXT glFlushMappedNamedBufferRangeEXT;
}

// direct state access dependencies
private __gshared bool _ARB_vertex_program;
bool ARB_vertex_program() @property { return _ARB_vertex_program; }

private __gshared bool _EXT_draw_buffers2;
bool EXT_draw_buffers2() @property { return _EXT_draw_buffers2; }


private __gshared bool _EXT_texture_buffer_object;
bool EXT_texture_buffer_object() @property { return _EXT_texture_buffer_object; }

private __gshared bool _EXT_texture_integer;
bool EXT_texture_integer() @property { return _EXT_texture_integer; }

private __gshared bool _EXT_gpu_shader4;
bool EXT_gpu_shader4() @property { return _EXT_gpu_shader4; }

private __gshared bool _EXT_gpu_program_parameters;
bool EXT_gpu_program_parameters() @property { return _EXT_gpu_program_parameters; }

private __gshared bool _NV_gpu_program4;
bool NV_gpu_program4() @property { return _NV_gpu_program4; }

private __gshared bool _NV_framebuffer_multisample_coverage;
bool NV_framebuffer_multisample_coverage() @property { return _NV_framebuffer_multisample_coverage; }

private __gshared bool _EXT_geometry_shader4;
bool EXT_geometry_shader4() @property { return _EXT_geometry_shader4; }

private __gshared bool _NV_explicit_multisample;
bool NV_explicit_multisample() @property { return _NV_explicit_multisample; }

import std.stdio;

private __gshared bool _EXT_direct_state_access;
bool EXT_direct_state_access() @property { return _EXT_direct_state_access; }
private void load_EXT_direct_state_access() {
    try {
        //    <OpenGL 1.1: New client commands>
        //
        bindGLFunc( cast( void** )&glClientAttribDefaultEXT, "glClientAttribDefaultEXT" );
        bindGLFunc( cast( void** )&glPushClientAttribDefaultEXT, "glPushClientAttribDefaultEXT" );
        
        //    <OpenGL 1.0: New matrix commands add "Matrix" prefix to name,
        //    drops "Matrix" suffix from name, and add initial "GLenum matrixMode"
        //    parameter>
        
        bindGLFunc( cast( void** )&glMatrixLoadfEXT, "glMatrixLoadfEXT" );
        bindGLFunc( cast( void** )&glMatrixLoaddEXT, "glMatrixLoaddEXT" );
        bindGLFunc( cast( void** )&glMatrixMultfEXT, "glMatrixMultfEXT" );
        bindGLFunc( cast( void** )&glMatrixMultdEXT, "glMatrixMultdEXT" );
        bindGLFunc( cast( void** )&glMatrixLoadIdentityEXT, "glMatrixLoadIdentityEXT" );
        bindGLFunc( cast( void** )&glMatrixRotatefEXT, "glMatrixRotatefEXT" );
        bindGLFunc( cast( void** )&glMatrixRotatedEXT, "glMatrixRotatedEXT" );
        bindGLFunc( cast( void** )&glMatrixScalefEXT, "glMatrixScalefEXT" );
        bindGLFunc( cast( void** )&glMatrixScaledEXT, "glMatrixScaledEXT" );
        bindGLFunc( cast( void** )&glMatrixTranslatefEXT, "glMatrixTranslatefEXT" );
        bindGLFunc( cast( void** )&glMatrixTranslatedEXT, "glMatrixTranslatedEXT" );
        bindGLFunc( cast( void** )&glMatrixOrthoEXT, "glMatrixOrthoEXT" );
        bindGLFunc( cast( void** )&glMatrixFrustumEXT, "glMatrixFrustumEXT" );
        bindGLFunc( cast( void** )&glMatrixPushEXT, "glMatrixPushEXT" );
        bindGLFunc( cast( void** )&glMatrixPopEXT, "glMatrixPopEXT" );
        
        //    <OpenGL 1.1: New texture object commands and queries replace "Tex"
        //    in name with "Texture" and add initial "uint texture" parameter>
        bindGLFunc( cast( void** )&glTextureParameteriEXT, "glTextureParameteriEXT" );
        bindGLFunc( cast( void** )&glTextureParameterivEXT, "glTextureParameterivEXT" );
        bindGLFunc( cast( void** )&glTextureParameterfEXT, "glTextureParameterfEXT" );
        bindGLFunc( cast( void** )&glTextureParameterfvEXT, "glTextureParameterfvEXT" );
        bindGLFunc( cast( void** )&glTextureImage1DEXT, "glTextureImage1DEXT" );
        bindGLFunc( cast( void** )&glTextureImage2DEXT, "glTextureImage2DEXT" );
        bindGLFunc( cast( void** )&glTextureSubImage1DEXT, "glTextureSubImage1DEXT" );
        bindGLFunc( cast( void** )&glTextureSubImage2DEXT, "glTextureSubImage2DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureImage1DEXT, "glCopyTextureImage1DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureImage2DEXT, "glCopyTextureImage2DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureSubImage1DEXT, "glCopyTextureSubImage1DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureSubImage2DEXT, "glCopyTextureSubImage2DEXT" );
        bindGLFunc( cast( void** )&glGetTextureImageEXT, "glGetTextureImageEXT" );
        bindGLFunc( cast( void** )&glGetTextureParameterfvEXT, "glGetTextureParameterfvEXT" );
        bindGLFunc( cast( void** )&glGetTextureParameterivEXT, "glGetTextureParameterivEXT" );
        bindGLFunc( cast( void** )&glGetTextureLevelParameterfvEXT, "glGetTextureLevelParameterfvEXT" );
        bindGLFunc( cast( void** )&glGetTextureLevelParameterivEXT, "glGetTextureLevelParameterivEXT" );
        
        //    <OpenGL 1.2: New 3D texture object commands replace "Tex" in name with
        //    "Texture" and adds initial "uint texture" parameter>
        bindGLFunc( cast( void** )&glTextureImage3DEXT, "glTextureImage3DEXT" );
        bindGLFunc( cast( void** )&glTextureSubImage3DEXT, "glTextureSubImage3DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureSubImage3DEXT, "glCopyTextureSubImage3DEXT" );
        
        //    <OpenGL 1.2.1: New multitexture commands and queries prefix "Multi"
        //    before "Tex" and add an initial "GLenum texunit" parameter (to identify
        //    the texture unit).>
        
        bindGLFunc( cast( void** )&glBindMultiTextureEXT, "glBindMultiTextureEXT" );
        bindGLFunc( cast( void** )&glMultiTexCoordPointerEXT, "glMultiTexCoordPointerEXT" );
        bindGLFunc( cast( void** )&glMultiTexEnvfEXT, "glMultiTexEnvfEXT" );
        bindGLFunc( cast( void** )&glMultiTexEnvfvEXT, "glMultiTexEnvfvEXT" );
        bindGLFunc( cast( void** )&glMultiTexEnviEXT, "glMultiTexEnviEXT" );
        bindGLFunc( cast( void** )&glMultiTexEnvivEXT, "glMultiTexEnvivEXT" );
        bindGLFunc( cast( void** )&glMultiTexGendEXT, "glMultiTexGendEXT" );
        bindGLFunc( cast( void** )&glMultiTexGendvEXT, "glMultiTexGendvEXT" );
        bindGLFunc( cast( void** )&glMultiTexGenfEXT, "glMultiTexGenfEXT" );
        bindGLFunc( cast( void** )&glMultiTexGenfvEXT, "glMultiTexGenfvEXT" );
        bindGLFunc( cast( void** )&glMultiTexGeniEXT, "glMultiTexGeniEXT" );
        bindGLFunc( cast( void** )&glMultiTexGenivEXT, "glMultiTexGenivEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexEnvfvEXT, "glGetMultiTexEnvfvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexEnvivEXT, "glGetMultiTexEnvivEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexGendvEXT, "glGetMultiTexGendvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexGenfvEXT, "glGetMultiTexGenfvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexGenivEXT, "glGetMultiTexGenivEXT" );
        bindGLFunc( cast( void** )&glMultiTexParameteriEXT, "glMultiTexParameteriEXT" );
        bindGLFunc( cast( void** )&glMultiTexParameterivEXT, "glMultiTexParameterivEXT" );
        bindGLFunc( cast( void** )&glMultiTexParameterfEXT, "glMultiTexParameterfEXT" );
        bindGLFunc( cast( void** )&glMultiTexParameterfvEXT, "glMultiTexParameterfvEXT" );
        bindGLFunc( cast( void** )&glMultiTexImage1DEXT, "glMultiTexImage1DEXT" );
        bindGLFunc( cast( void** )&glMultiTexImage2DEXT, "glMultiTexImage2DEXT" );
        bindGLFunc( cast( void** )&glMultiTexSubImage1DEXT, "glMultiTexSubImage1DEXT" );
        bindGLFunc( cast( void** )&glMultiTexSubImage2DEXT, "glMultiTexSubImage2DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexImage1DEXT, "glCopyMultiTexImage1DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexImage2DEXT, "glCopyMultiTexImage2DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexSubImage1DEXT, "glCopyMultiTexSubImage1DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexSubImage2DEXT, "glCopyMultiTexSubImage2DEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexImageEXT, "glGetMultiTexImageEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexParameterfvEXT, "glGetMultiTexParameterfvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexParameterivEXT, "glGetMultiTexParameterivEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexLevelParameterfvEXT, "glGetMultiTexLevelParameterfvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexLevelParameterivEXT, "glGetMultiTexLevelParameterivEXT" );
        bindGLFunc( cast( void** )&glMultiTexImage3DEXT, "glMultiTexImage3DEXT" );
        bindGLFunc( cast( void** )&glMultiTexSubImage3DEXT, "glMultiTexSubImage3DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexSubImage3DEXT, "glCopyMultiTexSubImage3DEXT" );
        
        //    <OpenGL 1.2.1: New indexed texture commands and queries append
        //    "Indexed" to name and add "uint index" parameter (to identify the
        //    texture unit index) after state name parameters (if any) and before
        //    state value parameters>
        
        bindGLFunc( cast( void** )&glEnableClientStateIndexedEXT, "glEnableClientStateIndexedEXT" );
        bindGLFunc( cast( void** )&glDisableClientStateIndexedEXT, "glDisableClientStateIndexedEXT" );
        
        //    <OpenGL 3.0: New indexed texture commands and queries append "i"
        //    to name and add "uint index" parameter (to identify the texture
        //    unit index) after state name parameters (if any) and before state
        //    value parameters>
        
        bindGLFunc( cast( void** )&glEnableClientStateiEXT, "glEnableClientStateiEXT" );
        bindGLFunc( cast( void** )&glDisableClientStateiEXT, "glDisableClientStateiEXT" );
        
        //    <OpenGL 1.2.1: New indexed generic queries (added for indexed texture
        //   state) append "Indexed" to name and add "uint index" parameter
        //    (to identify the texture unit) after state name parameters (if any) and
        //    before state value parameters>
        
        bindGLFunc( cast( void** )&glGetFloatIndexedvEXT, "glGetFloatIndexedvEXT" );
        bindGLFunc( cast( void** )&glGetDoubleIndexedvEXT, "glGetDoubleIndexedvEXT" );
        bindGLFunc( cast( void** )&glGetPointerIndexedvEXT, "glGetPointerIndexedvEXT" );
        
        //    <OpenGL 3.0: New indexed generic queries (added for indexed texture
        //    state) replace "v" for "i_v" to name and add "uint index" parameter
        //    (to identify the texture unit) after state name parameters (if any)
        //    and before state value parameters>
        
        bindGLFunc( cast( void** )&glGetFloati_vEXT, "glGetFloati_vEXT" );
        bindGLFunc( cast( void** )&glGetDoublei_vEXT, "glGetDoublei_vEXT" );
        bindGLFunc( cast( void** )&glGetPointeri_vEXT, "glGetPointeri_vEXT" );
        
        //    <OpenGL 1.2.1:  Extend the functionality of these EXT_draw_buffers2
        //    commands and queries for multitexture>

        // force this shit to false because even if EXT_draw_buffers2 is reported to be supported
        // the DSA extension to it does not work on all vendors.
        //if ( EXT_draw_buffers2 ) {
        if ( false ) {
            bindGLFunc( cast( void** )&glEnableIndexedEXT, "glEnableIndexedEXT" );
            bindGLFunc( cast( void** )&glDisableIndexedEXT, "glDisableIndexedEXT" );
            bindGLFunc( cast( void** )&glIsEnabledIndexedEXT, "glIsEnabledIndexedEXT" );
            bindGLFunc( cast( void** )&glGetIntegerIndexedvEXT, "glGetIntegerIndexedvEXT" );
            bindGLFunc( cast( void** )&glGetGLbooleanIndexedvEXT, "glGetGLbooleanIndexedvEXT" );
        }
        
        //    <ARB_vertex_program: New program commands and queries add "Named"
        //    prefix to name and adds initial "uint program" parameter>
        
        if ( ARB_vertex_program ) {
            bindGLFunc( cast( void** )&glNamedProgramStringEXT, "glNamedProgramStringEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameter4dEXT, "glNamedProgramLocalParameter4dEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameter4dvEXT, "glNamedProgramLocalParameter4dvEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameter4fEXT, "glNamedProgramLocalParameter4fEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameter4fvEXT, "glNamedProgramLocalParameter4fvEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramLocalParameterdvEXT, "glGetNamedProgramLocalParameterdvEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramLocalParameterfvEXT, "glGetNamedProgramLocalParameterfvEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramivEXT, "glGetNamedProgramivEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramStringEXT, "glGetNamedProgramStringEXT" );
        }
        
        //    <OpenGL 1.3: New compressed texture object commands replace "Tex"
        //    in name with "Texture" and add initial "uint texture" parameter>
        
        bindGLFunc( cast( void** )&glCompressedTextureImage3DEXT, "glCompressedTextureImage3DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureImage2DEXT, "glCompressedTextureImage2DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureImage1DEXT, "glCompressedTextureImage1DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureSubImage3DEXT, "glCompressedTextureSubImage3DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureSubImage2DEXT, "glCompressedTextureSubImage2DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureSubImage1DEXT, "glCompressedTextureSubImage1DEXT" );
        bindGLFunc( cast( void** )&glGetCompressedTextureImageEXT, "glGetCompressedTextureImageEXT" );
        
        //    <OpenGL 1.3: New multitexture compressed texture commands and queries
        //    prefix "Multi" before "Tex" and add an initial "GLenum texunit"
        //    parameter (to identify the texture unit).>
        
        bindGLFunc( cast( void** )&glCompressedMultiTexImage3DEXT, "glCompressedMultiTexImage3DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexImage2DEXT, "glCompressedMultiTexImage2DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexImage1DEXT, "glCompressedMultiTexImage1DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexSubImage3DEXT, "glCompressedMultiTexSubImage3DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexSubImage2DEXT, "glCompressedMultiTexSubImage2DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexSubImage1DEXT, "glCompressedMultiTexSubImage1DEXT" );
        bindGLFunc( cast( void** )&glGetCompressedMultiTexImageEXT, "glGetCompressedMultiTexImageEXT" );
        
        //    <OpenGL 1.3: New transpose matrix commands add "Matrix" suffix
        //    to name, drops "Matrix" suffix from name, and add initial "GLenum
        //    matrixMode" parameter>
        
        bindGLFunc( cast( void** )&glMatrixLoadTransposefEXT, "glMatrixLoadTransposefEXT" );
        bindGLFunc( cast( void** )&glMatrixLoadTransposedEXT, "glMatrixLoadTransposedEXT" );
        bindGLFunc( cast( void** )&glMatrixMultTransposefEXT, "glMatrixMultTransposefEXT" );
        bindGLFunc( cast( void** )&glMatrixMultTransposedEXT, "glMatrixMultTransposedEXT" );
        
        //    <OpenGL 1.5: New buffer commands and queries replace "Buffer" with
        //    "NamedBuffer" in name and replace "GLenum target" parameter with
        //    "uint buffer">
        
        bindGLFunc( cast( void** )&glNamedBufferDataEXT, "glNamedBufferDataEXT" );
        bindGLFunc( cast( void** )&glNamedBufferSubDataEXT, "glNamedBufferSubDataEXT" );
        bindGLFunc( cast( void** )&glMapNamedBufferEXT, "glMapNamedBufferEXT" );
        bindGLFunc( cast( void** )&glUnmapNamedBufferEXT, "glUnmapNamedBufferEXT" );
        bindGLFunc( cast( void** )&glGetNamedBufferParameterivEXT, "glGetNamedBufferParameterivEXT" );
        bindGLFunc( cast( void** )&glGetNamedBufferPointervEXT, "glGetNamedBufferPointervEXT" );
        bindGLFunc( cast( void** )&glGetNamedBufferSubDataEXT, "glGetNamedBufferSubDataEXT" );
        
        //    <OpenGL 2.0: New uniform commands add "Program" prefix to name and
        //    add initial "uint program" parameter>
        
        bindGLFunc( cast( void** )&glProgramUniform1fEXT, "glProgramUniform1fEXT" );
        bindGLFunc( cast( void** )&glProgramUniform2fEXT, "glProgramUniform2fEXT" );
        bindGLFunc( cast( void** )&glProgramUniform3fEXT, "glProgramUniform3fEXT" );
        bindGLFunc( cast( void** )&glProgramUniform4fEXT, "glProgramUniform4fEXT" );
        bindGLFunc( cast( void** )&glProgramUniform1iEXT, "glProgramUniform1iEXT" );
        bindGLFunc( cast( void** )&glProgramUniform2iEXT, "glProgramUniform2iEXT" );
        bindGLFunc( cast( void** )&glProgramUniform3iEXT, "glProgramUniform3iEXT" );
        bindGLFunc( cast( void** )&glProgramUniform4iEXT, "glProgramUniform4iEXT" );
        bindGLFunc( cast( void** )&glProgramUniform1fvEXT, "glProgramUniform1fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniform2fvEXT, "glProgramUniform2fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniform3fvEXT, "glProgramUniform3fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniform4fvEXT, "glProgramUniform4fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniform1ivEXT, "glProgramUniform1ivEXT" );
        bindGLFunc( cast( void** )&glProgramUniform2ivEXT, "glProgramUniform2ivEXT" );
        bindGLFunc( cast( void** )&glProgramUniform3ivEXT, "glProgramUniform3ivEXT" );
        bindGLFunc( cast( void** )&glProgramUniform4ivEXT, "glProgramUniform4ivEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix2fvEXT, "glProgramUniformMatrix2fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix3fvEXT, "glProgramUniformMatrix3fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix4fvEXT, "glProgramUniformMatrix4fvEXT" );
        
        //    <OpenGL 2.1: New uniform matrix commands add "Program" prefix to
        //    name and add initial "uint program" parameter>
        
        bindGLFunc( cast( void** )&glProgramUniformMatrix2x3fvEXT, "glProgramUniformMatrix2x3fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix3x2fvEXT, "glProgramUniformMatrix3x2fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix2x4fvEXT, "glProgramUniformMatrix2x4fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix4x2fvEXT, "glProgramUniformMatrix4x2fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix3x4fvEXT, "glProgramUniformMatrix3x4fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix4x3fvEXT, "glProgramUniformMatrix4x3fvEXT" );
        
        //    <EXT_texture_buffer_object:  New texture buffer object command
        //    replaces "Tex" in name with "Texture" and adds initial "uint texture"
        //    parameter>
        if ( EXT_texture_buffer_object ) {
            bindGLFunc( cast( void** )&glTextureBufferEXT, "glTextureBufferEXT" );
            bindGLFunc( cast( void** )&glMultiTexBufferEXT, "glMultiTexBufferEXT" );
        }
        
        //    <EXT_texture_integer: New integer texture object commands and queries
        //    replace "Tex" in name with "Texture" and add initial "uint texture"
        //    parameter>
        if ( EXT_texture_integer ) {
            bindGLFunc( cast( void** )&glTextureParameterIivEXT, "glTextureParameterIivEXT" );
            bindGLFunc( cast( void** )&glTextureParameterIuivEXT, "glTextureParameterIuivEXT" );
            bindGLFunc( cast( void** )&glGetTextureParameterIivEXT, "glGetTextureParameterIivEXT" );
            bindGLFunc( cast( void** )&glGetTextureParameterIuivEXT, "glGetTextureParameterIuivEXT" );
            bindGLFunc( cast( void** )&glMultiTexParameterIivEXT, "glMultiTexParameterIivEXT" );
            bindGLFunc( cast( void** )&glMultiTexParameterIuivEXT, "glMultiTexParameterIuivEXT" );
            bindGLFunc( cast( void** )&glGetMultiTexParameterIivEXT, "glGetMultiTexParameterIivEXT" );
            bindGLFunc( cast( void** )&glGetMultiTexParameterIuivEXT, "glGetMultiTexParameterIuivEXT" );
        }
        
        //    <EXT_gpu_shader4: New integer uniform commands add "Program" prefix
        //    to name and add initial "uint program" parameter>
        if ( EXT_gpu_shader4 ) {
            bindGLFunc( cast( void** )&glProgramUniform1uiEXT, "glProgramUniform1uiEXT" );
            bindGLFunc( cast( void** )&glProgramUniform2uiEXT, "glProgramUniform2uiEXT" );
            bindGLFunc( cast( void** )&glProgramUniform3uiEXT, "glProgramUniform3uiEXT" );
            bindGLFunc( cast( void** )&glProgramUniform4uiEXT, "glProgramUniform4uiEXT" );
            bindGLFunc( cast( void** )&glProgramUniform1uivEXT, "glProgramUniform1uivEXT" );
            bindGLFunc( cast( void** )&glProgramUniform2uivEXT, "glProgramUniform2uivEXT" );
            bindGLFunc( cast( void** )&glProgramUniform3uivEXT, "glProgramUniform3uivEXT" );
            bindGLFunc( cast( void** )&glProgramUniform4uivEXT, "glProgramUniform4uivEXT" );
        }
        
        //    <EXT_gpu_program_parameters: New program command adds "Named" prefix
        //   to name and adds "uint program" parameter>
        if ( EXT_gpu_program_parameters ) {
            bindGLFunc( cast( void** )&glNamedProgramLocalParameters4fvEXT, "glNamedProgramLocalParameters4fvEXT" );
        }
        
        //    <NV_gpu_program4: New program commands and queries add "Named"
        //    prefix to name and replace "GLenum target" with "uint program">
        if ( NV_gpu_program4 ) {
            bindGLFunc( cast( void** )&glNamedProgramLocalParameterI4iEXT, "glNamedProgramLocalParameterI4iEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameterI4ivEXT, "glNamedProgramLocalParameterI4ivEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParametersI4ivEXT, "glNamedProgramLocalParametersI4ivEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameterI4uiEXT, "glNamedProgramLocalParameterI4uiEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameterI4uivEXT, "glNamedProgramLocalParameterI4uivEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParametersI4uivEXT, "glNamedProgramLocalParametersI4uivEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramLocalParameterIivEXT, "glGetNamedProgramLocalParameterIivEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramLocalParameterIuivEXT, "glGetNamedProgramLocalParameterIuivEXT" );
        }
        
        //    <OpenGL 3.0: New renderbuffer commands add "Named" prefix to name
        //    and replace "GLenum target" with "uint renderbuffer">
        
        bindGLFunc( cast( void** )&glNamedRenderbufferStorageEXT, "glNamedRenderbufferStorageEXT" );
        bindGLFunc( cast( void** )&glGetNamedRenderbufferParameterivEXT, "glGetNamedRenderbufferParameterivEXT" );
        
        //    <OpenGL 3.0: New renderbuffer commands add "Named"
        //    prefix to name and replace "GLenum target" with "uint renderbuffer">
        
        bindGLFunc( cast( void** )&glNamedRenderbufferStorageMultisampleEXT, "glNamedRenderbufferStorageMultisampleEXT" );
        
        //    <NV_framebuffer_multisample_coverage: New renderbuffer commands
        //    add "Named" prefix to name and replace "GLenum target" with "uint
        //    renderbuffer">
        if ( NV_framebuffer_multisample_coverage ) {
            bindGLFunc( cast( void** )&glNamedRenderbufferStorageMultisampleCoverageEXT, "glNamedRenderbufferStorageMultisampleCoverageEXT" );
        }
        
        //    <OpenGL 3.0: New framebuffer commands add "Named" prefix to name
        //    and replace "GLenum target" with "uint framebuffer">
        
        bindGLFunc( cast( void** )&glCheckNamedFramebufferStatusEXT, "glCheckNamedFramebufferStatusEXT" );
        bindGLFunc( cast( void** )&glNamedFramebufferTexture1DEXT, "glNamedFramebufferTexture1DEXT" );
        bindGLFunc( cast( void** )&glNamedFramebufferTexture2DEXT, "glNamedFramebufferTexture2DEXT" );
        bindGLFunc( cast( void** )&glNamedFramebufferTexture3DEXT, "glNamedFramebufferTexture3DEXT" );
        bindGLFunc( cast( void** )&glNamedFramebufferRenderbufferEXT, "glNamedFramebufferRenderbufferEXT" );
        bindGLFunc( cast( void** )&glGetNamedFramebufferAttachmentParameterivEXT, "glGetNamedFramebufferAttachmentParameterivEXT" );
        
        //    <OpenGL 3.0: New texture commands add "Texture" within name and
        //    replace "GLenum target" with "uint texture">
        
        bindGLFunc( cast( void** )&glGenerateTextureMipmapEXT, "glGenerateTextureMipmapEXT" );
        
        //    <OpenGL 3.0: New texture commands add "MultiTex" within name and
        //    replace "GLenum target" with "GLenum texunit">
        
        bindGLFunc( cast( void** )&glGenerateMultiTexMipmapEXT, "glGenerateMultiTexMipmapEXT" );
        
        //    <OpenGL 3.0: New framebuffer commands>
        
        bindGLFunc( cast( void** )&glFramebufferDrawBufferEXT, "glFramebufferDrawBufferEXT" );
        bindGLFunc( cast( void** )&glFramebufferDrawBuffersEXT, "glFramebufferDrawBuffersEXT" );
        bindGLFunc( cast( void** )&glFramebufferReadBufferEXT, "glFramebufferReadBufferEXT" );
        
        //    <OpenGL 3.0: New framebuffer query>
        
        bindGLFunc( cast( void** )&glGetFramebufferParameterivEXT, "glGetFramebufferParameterivEXT" );
        
        //    <OpenGL 3.0: New buffer data copy command>
        bindGLFunc( cast( void** )&glNamedCopyBufferSubDataEXT, "glNamedCopyBufferSubDataEXT" );
        
        //    <EXT_geometry_shader4 or NV_gpu_program4: New framebuffer commands
        //    add "Named" prefix to name and replace "GLenum target" with "uint
        //    framebuffer">
        if ( EXT_geometry_shader4 || NV_gpu_program4 ) {
            bindGLFunc( cast( void** )&glNamedFramebufferTextureEXT, "glNamedFramebufferTextureEXT" );
            bindGLFunc( cast( void** )&glNamedFramebufferTextureLayerEXT, "glNamedFramebufferTextureLayerEXT" );
            bindGLFunc( cast( void** )&glNamedFramebufferTextureFaceEXT, "glNamedFramebufferTextureFaceEXT" );
        }
        
        //    <NV_explicit_multisample:  New texture renderbuffer object command
        //    replaces "Tex" in name with "Texture" and add initial "uint texture"
        //    parameter> 
        //    <NV_explicit_multisample: New multitexture texture renderbuffer command
        //    prefixes "Multi" before "Tex" and add an initial "GLenum texunit"
        //    parameter (to identify the texture unit)>
        if ( NV_explicit_multisample ) {
            bindGLFunc( cast( void** )&glTextureRenderbufferEXT, "glTextureRenderbufferEXT" );
            bindGLFunc( cast( void** )&glMultiTexRenderbufferEXT, "glMultiTexRenderbufferEXT" );
        }
        
        //    <OpenGL 3.0: New vertex array specification commands for vertex
        //    array objects prefix "VertexArray", add initial "uint vaobj" and
        //    "uint buffer" parameters, change "Pointer" suffix to "Offset",
        //    and change the final parameter from "const void *" to "intptr offset">
        
        bindGLFunc( cast( void** )&glVertexArrayVertexOffsetEXT, "glVertexArrayVertexOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayColorOffsetEXT, "glVertexArrayColorOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayEdgeFlagOffsetEXT, "glVertexArrayEdgeFlagOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayIndexOffsetEXT, "glVertexArrayIndexOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayNormalOffsetEXT, "glVertexArrayNormalOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayTexCoordOffsetEXT, "glVertexArrayTexCoordOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayMultiTexCoordOffsetEXT, "glVertexArrayMultiTexCoordOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayFogCoordOffsetEXT, "glVertexArrayFogCoordOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArraySecondaryColorOffsetEXT, "glVertexArraySecondaryColorOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayVertexAttribOffsetEXT, "glVertexArrayVertexAttribOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayVertexAttribIOffsetEXT, "glVertexArrayVertexAttribIOffsetEXT" );
        
        //    <OpenGL 3.0: New vertex array enable commands for vertex array
        //    objects change "ClientState" to "VertexArray" and add an initial
        //    "uint vaobj" parameter>
        
        bindGLFunc( cast( void** )&glEnableVertexArrayEXT, "glEnableVertexArrayEXT" );
        bindGLFunc( cast( void** )&glDisableVertexArrayEXT, "glDisableVertexArrayEXT" );
        
        //    <OpenGL 3.0: New vertex attrib array enable commands for vertex
        //    array objects change "VertexAttribArray" to "VertexArrayAttrib"
        //    and add an initial "uint vaobj" parameter>
        
        bindGLFunc( cast( void** )&glEnableVertexArrayAttribEXT, "glEnableVertexArrayAttribEXT" );
        bindGLFunc( cast( void** )&glDisableVertexArrayAttribEXT, "glDisableVertexArrayAttribEXT" );
        
        //    <OpenGL 3.0: New queries for vertex array objects>
        
        bindGLFunc( cast( void** )&glGetVertexArrayIntegervEXT, "glGetVertexArrayIntegervEXT" );
        bindGLFunc( cast( void** )&glGetVertexArrayPointervEXT, "glGetVertexArrayPointervEXT" );
        bindGLFunc( cast( void** )&glGetVertexArrayIntegeri_vEXT, "glGetVertexArrayIntegeri_vEXT" );
        bindGLFunc( cast( void** )&glGetVertexArrayPointeri_vEXT, "glGetVertexArrayPointeri_vEXT" );
        
        //    <OpenGL 3.0: New buffer commands replace "Buffer" with "NamedBuffer"
        //    in name and replace "GLenum target" parameter with "uint buffer">
        
        bindGLFunc( cast( void** )&glMapNamedBufferRangeEXT, "glMapNamedBufferRangeEXT" );
        bindGLFunc( cast( void** )&glFlushMappedNamedBufferRangeEXT, "glFlushMappedNamedBufferRangeEXT" );
        _EXT_direct_state_access = true;
    } catch( Exception e ) {
        _EXT_direct_state_access = false;
    }
}


package void loadEXT( GLVersion glversion ) {
    _EXT_texture_filter_anisotropic = isExtSupported( glversion, "GL_EXT_texture_filter_anisotropic" );
    _EXT_framebuffer_object = isExtSupported( glversion, "GL_EXT_framebuffer_object" );
    if( _EXT_framebuffer_object ) load_EXT_framebuffer_object();
    
    _EXT_texture_buffer_object           = isExtSupported( glversion, "GL_EXT_texture_buffer_object" );
    _EXT_texture_integer                 = isExtSupported( glversion, "GL_EXT_texture_integer" );
    _EXT_gpu_shader4                     = isExtSupported( glversion, "GL_EXT_gpu_shader4" );
    _EXT_gpu_program_parameters          = isExtSupported( glversion, "GL_EXT_gpu_program_parameters" );
    _NV_gpu_program4                     = isExtSupported( glversion, "GL_NV_gpu_program4" );
    _NV_framebuffer_multisample_coverage = isExtSupported( glversion, "GL_NV_framebuffer_multisample_coverage" );
    _EXT_geometry_shader4                = isExtSupported( glversion, "GL_EXT_geometry_shader4" );
    _NV_explicit_multisample             = isExtSupported( glversion, "GL_NV_explicit_multisample" );
    _ARB_vertex_program                  = isExtSupported( glversion, "GL_ARB_vertex_program" );
    _EXT_draw_buffers2                   = isExtSupported( glversion, "GL_EXT_draw_buffers2" );
    
    // Direct state access extension should be ALWAYS loaded in the last place
    _EXT_direct_state_access = isExtSupported( glversion, "GL_EXT_direct_state_access" );
    if (_EXT_direct_state_access ) load_EXT_direct_state_access();
}
